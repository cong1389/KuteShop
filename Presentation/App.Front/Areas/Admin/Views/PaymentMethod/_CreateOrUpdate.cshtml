<!--PaymentMethod; _CreateOrUpdate--->

@using App.Aplication
@using App.Domain.Common
@using App.Service.Language
@using Resources
@model App.FakeEntity.Payments.PaymentMethodViewModel

<div class="form-horizontal">
    <div class="form-body">
        @Html.ValidationSummary(true, "", new { @class = "text-danger col-md-offset-3" })
        
        <div class="form-group">
            @Html.LabelFor(model => model.Status, new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                <div class="radio-list">
                    <label class="radio-inline">
                        @Html.RadioButtonFor(x => x.Status, (int)Status.Enable, new { @checked = "checked" }) @FormUI.Active
                    </label>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(x => x.Status, (int)Status.Disable) @FormUI.InActive
                    </label>
                </div>
                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "help-block" })
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.Image, new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                <div class="fileinput fileinput-new" data-provides="fileinput">
                    <div class="input-group input-large">
                        <div class="form-control uneditable-input input-fixed input-medium" data-trigger="fileinput">
                            <i class="fa fa-file fileinput-exists"></i>&nbsp;
                            <span class="fileinput-filename"> </span>
                        </div>
                        <span class="input-group-addon btn default btn-file">
                            <span class="fileinput-new">@FormUI.SelectFile</span>
                            <span class="fileinput-exists"> @FormUI.ChangeFile </span>
                            @Html.TextBoxFor(model => model.Image, new { type = "file" })
                        </span>
                        <a href="javascript:;" class="input-group-addon btn red fileinput-exists" data-dismiss="fileinput"> Remove </a>
                    </div>
                </div>
                @Html.ValidationMessageFor(model => model.Image, "", new { @class = "help-block" })
            </div>
            <div class="col-md-5 col-md-offset-3">
                @if (!string.IsNullOrEmpty(Model.ImageUrl))
                {
                    <img src="@Model.ImageUrl.ValidateImage()" width="40px" />
                }
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OrderDisplay, new { @class = "control-label col-md-3" })
            <div class="col-md-5">
                @Html.TextBoxFor(model => model.OrderDisplay, new { @class = "form-control", type = "number" })
                @Html.ValidationMessageFor(model => model.OrderDisplay, "", new { @class = "help-block" })
            </div>
        </div>
        
        <div class="tabbable-line m-heading-1 border-green m-bordered dashboard-stat grey">
            <ul class="nav nav-tabs ">
                @{
                    for (int i = 0; i < Model.Locales.Count; i++)
                    {
                        App.Domain.Entities.Language.Language language = DependencyResolver.Current.GetService<ILanguageService>().GetById(Model.Locales[i].LanguageId);

                        <li class="@(i == 0 ? "active" : "")">
                            <a href="#tab_@(i + 1)" data-toggle="tab"><img src="@language.Flag.ValidateImage()"/> @language.LanguageName</a>
                        </li>
                    }
                }               
            </ul>

            <div class="tab-content">

                @{
                    for (int i = 0; i < Model.Locales.Count; i++)
                    {
                        <div class="tab-pane @(i == 0 ? "active" : "")" id="tab_@(i+1)">
                            <div class="row">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Locales[i].PaymentMethodSystemName, new { @class = "control-label col-md-3" })
                                    <div class="col-md-8">
                                        @Html.TextBoxFor(model => model.Locales[i].PaymentMethodSystemName, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Locales[i].PaymentMethodSystemName, "", new { @class = "help-block" })
                                    </div>
                                </div>
                            </div>
                            
                            <div class="row">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Locales[i].Description, new { @class = "control-label col-md-3" })
                                    <div class="col-md-8">
                                        @Html.TextAreaFor(model => model.Locales[i].Description, new { @class = "form-control ckeditor" })
                                        @Html.ValidationMessageFor(model => model.Locales[i].Description, "", new { @class = "help-block" })
                                    </div>
                                </div>
                            </div>

                        </div>

                        @Html.HiddenFor(model => model.Locales[i].LocalesId)
                        @Html.HiddenFor(model => model.Locales[i].LanguageId)
                    }

                    @Html.HiddenFor(model => model.PaymentMethodSystemName, new { @class = "form-control", Value = Model.Locales[0].PaymentMethodSystemName }) 

                }

            </div>
        </div>

    </div>
</div>
<!--/PaymentMethod; _CreateOrUpdate--->