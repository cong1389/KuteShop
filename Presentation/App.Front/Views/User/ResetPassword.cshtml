<!---ResetPassword-->
@using App.Aplication.Extensions
@model App.Front.Models.ResetPasswordViewModel
@{
    ViewBag.Title = "Khôi phục mật khẩu";
}

<div class="columns-container">
    <div class="container login-shop" id="columns">
        <div class="row clearfix">
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12" id="layout-page">
                <span class="header-contact header-page clearfix text-center">
                    <h1>@ViewBag.Title</h1>
                </span>

                <div id="customer-login">
                    <div id="login" class="userbox" style="display: block;">
                        <div class="accounttype">
                            <h2 class="title"></h2>
                        </div>

                        @using (Html.BeginForm("ResetPassword", "User", FormMethod.Post, new { enctype = "multipart/form-data" }))
                        {
                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true, "", new { @class = "text-danger col-md-offset-3" })
                            @Html.HiddenFor(model => model.Code)

                            <div class="clearfix large_form">
                                <label for="customer_password" class="icon-field"><i class="icon-login icon-shield"></i></label>
                                @Html.TextBoxFor(mode => mode.Email, new { type = "Email", required = true, @class = "text", placeholder = Html.DisplayPlaceHolderFor(m => m.Email) })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "required require_symbol" })
                            </div>

                            <div class="clearfix large_form">
                                <label for="customer_password" class="icon-field"><i class="icon-login icon-shield"></i></label>
                                @Html.TextBoxFor(mode => mode.Password, new { type = "password", required = true, @class = "text", placeholder = Html.DisplayPlaceHolderFor(m => m.Password) })
                                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "required require_symbol" })
                            </div>

                            <div class="clearfix large_form">
                                <label for="customer_password" class="icon-field"><i class="icon-login icon-shield"></i></label>
                                @Html.TextBoxFor(mode => mode.ConfirmPassword, new { type = "password", required = true, @class = "text", placeholder = Html.DisplayPlaceHolderFor(m => m.ConfirmPassword) })
                                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "required require_symbol" })
                            </div>

                            <div class="action_bottom">
                                <input class="btn btn-signin" type="submit" value="@ViewBag.Title">
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!---/ResetPassword-->
